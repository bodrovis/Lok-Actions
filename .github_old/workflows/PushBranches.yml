name: Push to Lokalise (branches)
run-name: Push to Lokalise [${{ github.ref_name }}]
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      LOKALISE_SOURCE_LANG: ${{ vars.LOKALISE_SOURCE_LANG }}
      LOKALISE_FILE_FORMAT: ${{ vars.LOKALISE_FILE_FORMAT }}
      GIT_UPSTREAM_BRANCH: ${{ vars.GIT_UPSTREAM_BRANCH }}
      LOKALISE_TRANSLATIONS_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if Triggering Branch is Default Branch
        run: |
          if [ "${{ github.ref_name }}" = "${{ github.event.repository.default_branch }}" ]; then
            echo "LOKALISE_BRANCH=master" >> $GITHUB_ENV
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
          else
            echo "LOKALISE_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
          fi

      - name: Get commit SHA of the upstream branch
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}
        run: |
          BASE_SHA=$(git rev-parse origin/${{ env.GIT_UPSTREAM_BRANCH }})
          CURRENT_SHA="${{ github.sha }}"

          if [ "$BASE_SHA" = "$CURRENT_SHA" ]; then
            echo "No changes detected between the base and current SHA."
            echo "SKIP_CHANGED_FILES_STEP=true" >> $GITHUB_ENV
            exit 0
          else
            echo "SKIP_CHANGED_FILES_STEP=false" >> $GITHUB_ENV
            echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
            echo "CURRENT_SHA=$CURRENT_SHA" >> $GITHUB_ENV
          fi

      - name: Get all changed files between branches
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' && env.SKIP_CHANGED_FILES_STEP == 'false' }}
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          base_sha: ${{ env.BASE_SHA }}
          sha: ${{ env.CURRENT_SHA }}
          files: |
            ${{ env.LOKALISE_TRANSLATIONS_PATH }}/${{ env.LOKALISE_SOURCE_LANG }}/**/*.${{ env.LOKALISE_FILE_FORMAT }}

      - name: Install Lokalise CLI
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' || env.SKIP_CHANGED_FILES_STEP == 'false' }}
        run: |
          if [ ! -f ./bin/lokalise2 ]; then
            curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh || {
              echo "Failed to install Lokalise CLI"
              exit 1
            }
          else
            echo "Lokalise CLI already installed, skipping installation."
          fi

      - name: Ensure Lokalise Branch Exists
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' && steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          LOKALISE_BRANCHES=$(./bin/lokalise2 --token="${{ env.LOKALISE_API_TOKEN }}" \
            --project-id="${{ env.LOKALISE_PROJECT_ID }}" branch list | jq -r '.branches[].name')

          if echo "$LOKALISE_BRANCHES" | grep -qw "${{ env.LOKALISE_BRANCH }}"; then
            echo "Branch '${{ env.LOKALISE_BRANCH }}' exists in Lokalise."
          else
            echo "Branch '${{ env.LOKALISE_BRANCH }}' does not exist. Creating it now."
            
            ./bin/lokalise2 --token="${{ env.LOKALISE_API_TOKEN }}" \
              --project-id="${{ env.LOKALISE_PROJECT_ID }}" \
              branch create --name "${{ env.LOKALISE_BRANCH }}" || {
                echo "Failed to create branch in Lokalise."
                exit 1
              }
            
            echo "Branch '${{ env.LOKALISE_BRANCH }}' created successfully."
          fi

          echo "LOKALISE_BRANCH=$LOKALISE_BRANCH" >> $GITHUB_ENV

      - name: Push files to Lokalise
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' || steps.changed-files.outputs.any_changed == 'true' }}
        env:
          LOKALISE_CLI_ADD_PARAMS: ${{ vars.LOKALISE_PUSH_ADDITIONAL_PARAMS }}
        run: |
          if [ "${{ env.IS_DEFAULT_BRANCH }}" = "true" ]; then
            PROJECT_ID_WITH_BRANCH="${{ env.LOKALISE_PROJECT_ID }}"
            localization_files=$(find "${{ env.LOKALISE_TRANSLATIONS_PATH }}/${{ env.LOKALISE_SOURCE_LANG }}" -type f -name "*.${{ env.LOKALISE_FILE_FORMAT }}")
          else
            PROJECT_ID_WITH_BRANCH="${{ env.LOKALISE_PROJECT_ID }}:${{ env.LOKALISE_BRANCH }}"
            localization_files=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n')
          fi

          if [ -z "$localization_files" ]; then
            echo "No localization files found to upload. Exiting."
            exit 0
          fi

          chmod +x .github/scripts/lokalise_upload.sh

          echo "$localization_files" | xargs -P 6 -I {} bash -c '. ./.github/scripts/lokalise_upload.sh && upload_file "$@"' _ "{}" "$PROJECT_ID_WITH_BRANCH" "$LOKALISE_SOURCE_LANG"

          if [ $? -ne 0 ]; then
            echo "File upload failed"
            exit 1
          fi
name: Pull from Lokalise (branches)
run-name: Pull from Lokalise [${{ github.ref_name }}]
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      LOKALISE_FILE_FORMAT: ${{ vars.LOKALISE_FILE_FORMAT }}
      LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Lokalise CLI
        run: |
          if [ ! -f ./bin/lokalise2 ]; then
            curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh || {
              echo "Failed to install Lokalise CLI"
              exit 1
            }
          else
            echo "Lokalise CLI already installed, skipping installation."
          fi

      - name: Determine Lokalise Branch
        run: |
          if [ "${{ github.ref_name }}" = "${{ github.event.repository.default_branch }}" ]; then
            echo "LOKALISE_BRANCH=master" >> $GITHUB_ENV
          else
            LOKALISE_BRANCHES=$(./bin/lokalise2 --token="${{ env.LOKALISE_API_TOKEN }}" \
              --project-id="${{ env.LOKALISE_PROJECT_ID }}" \
              branch list | jq -r '.branches[].name')

            if echo "$LOKALISE_BRANCHES" | grep -qw "${{ github.ref_name }}"; then
              echo "LOKALISE_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
            else
              echo "Branch ${{ github.ref_name }} does not exist in Lokalise. Cancelling workflow."
              exit 0
            fi
          fi

      - name: Pull localization files from Lokalise and detect changes
        env:
          LOKALISE_CLI_ADD_PARAMS: ${{ vars.LOKALISE_PULL_ADDITIONAL_PARAMS }}
          LOKALISE_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
        run: |
          chmod +x .github/scripts/lokalise_download.sh
          . ./.github/scripts/lokalise_download.sh

          project_id_with_branch="${LOKALISE_PROJECT_ID}:${LOKALISE_BRANCH}"
          
          download_files "$project_id_with_branch"
                
          if [ $? -ne 0 ]; then
            echo "Error during file download"
            exit 1
          fi

          if [[ -n $(git status --untracked-files=no --porcelain) ]]; then
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          else
            echo "CHANGES_DETECTED=false" >> $GITHUB_ENV
          fi

      - name: Create and commit to localization branch if changes detected
        if: ${{ env.CHANGES_DETECTED == 'true' }}
        env:
          LOKALISE_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
          LOKALISE_SOURCE_LANG_ISO: ${{ vars.LOKALISE_SOURCE_LANG }}
          LOKALISE_BRANCH_MARKER: ${{ vars.LOKALISE_BRANCH_MARKER }}
        run: |
          SHORT_SHA=${GITHUB_SHA::6}
          GIT_LOCALIZATION_BRANCH_NAME="${{ env.LOKALISE_BRANCH_MARKER }}_${{ github.ref_name }}_${SHORT_SHA}"
          
          echo "GIT_LOCALIZATION_BRANCH_NAME=$GIT_LOCALIZATION_BRANCH_NAME" >> $GITHUB_ENV

          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git checkout -b "$GIT_LOCALIZATION_BRANCH_NAME" || git checkout "$GIT_LOCALIZATION_BRANCH_NAME"

          git add "${{ env.LOKALISE_FOLDER_PATH }}/**/*.${{ env.LOKALISE_FILE_FORMAT }}" -- ':!${{ env.LOKALISE_FOLDER_PATH }}/${{ env.LOKALISE_SOURCE_LANG_ISO }}/*.${{ env.LOKALISE_FILE_FORMAT }}'

          git commit -m 'Translations update'

          git push origin "$GIT_LOCALIZATION_BRANCH_NAME"

      - name: Create Pull Request if changes detected
        if: ${{ env.CHANGES_DETECTED == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create --base "${{ github.ref_name }}" \
                       --head "$GIT_LOCALIZATION_BRANCH_NAME" \
                       --title "Lokalise translations update" \
                       --body "" || {
            echo "Failed to create Pull Request."
            exit 1
          }

          echo "Pull Request created successfully."